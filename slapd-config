#!/bin/bash
#
# slapd runtime configuration management tool
#
# written by Thomas Urban <thomas.urban@cepharum.de>
# (c) 2012-2013, cepharum GmbH, Berlin
#
# $Date: 2012-04-14 22:50:40 +0000 (Sa, 14. Apr 2012) $ $Revision: 4 $
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

findEntries()
{
	if [ "${1}" = "-dn" ]
	then
		basedn="${2}"
		shift 2
	else
		basedn="cn=config"
	fi

	query="${1}"
	[ -z "$query" ] && query='objectClass=*'

	shift

	ldapsearch -Q -LLL -H ldapi:/// -Y EXTERNAL -b "$basedn" "$query" "$@" | sed -ne '/^ *$/!p' | sed -ne '1h;1!H;${;x;s/\n //g;p;}'
}

DBName2DN()
{
	for dn in `listDatabaseDNs`; do
		name="`DBDN2Name "$dn"`"
		[ "${1}" = "$name" -o "${1}" = "${name#*\}}" ] && { echo $dn; return 0; }
	done

	return 1
}

DBDN2Name()
{
	[ "${2}" = "unique" ] && DN="${1#*=}" || DN="${1#*\}}"
	echo "${DN%%,*}"
}

values2LDIF()
{
	values=
	i=0

	while read l; do
		[ $i -eq 0 ] || values="$values\n"
		values="$values${1}: {$i}${l}"
		i=$((i+1))
	done

	{ [ $i -lt 2 ] && sed 's/^\([^:]\+: \){0}/\1/' <<<"$values" || echo "$values"; } | sed 's/\\n/\n/g' | sed -n ':p;s/\([^\n]\{78\}\)\([^\n]\)/\1\n \2/;tp;p'
}

listEntries()
{
	dn="${1}"
	scope="${2:-sub}"

	shift 2

	findEntries -dn "${dn}" "objectClass=*" dn -s "$scope" "$@" | sed -n '/^ *$/!s/[^:]*: //p'
}

showEntry()
{
	dn="${1}"

	shift

	findEntries -dn "${dn}" "objectClass=*" -s base | sed -n '/^ *$/!p'
}

readAttribute()
{
	dn="${1}"
	attr="${2}"

	findEntries -dn "$dn" "$attr=*" "$attr" -s base | sed -n "/^$attr: /!d;s/^$attr: \({\(-\?[0-9][0-9]*\)}\)\?//;p"
}

writeAttribute()
{
	dn="${1}"
	attr="${2}"

	ldapmodify -Q -H ldapi:/// -Y EXTERNAL <<EOT
dn: $dn
changetype: modify
replace: $attr
`values2LDIF "$attr"`
-
EOT
}

insertAttributeLine()
{
	dn="${1}"
	attr="${2}"
	idx="${3}"
	rule="${4//;/\\;}"

	[ $idx -lt 1 ] && idx=1

	{
		readAttribute "$db" "$attr" | {
			if [ $idx -le `readAttribute "$db" "$attr" | wc -l` ]; then
				sed "${idx}i${rule}"
			else
				sed -n "p;\$i${rule}"
			fi
		}
	} | writeAttribute "$db" "$attr"
}

deleteAttributeLine()
{
	dn="${1}"
	attr="${2}"
	idx="${3}"

	[ $idx -ge 1 -a $idx -le `readAttribute "$dn" "$attr" | wc -l` ] || { echo "index out of bound" >&2; return 1; }

	readAttribute "$dn" "$attr" | sed "${idx}d" | writeAttribute "$dn" "$attr" "${4}"
}

schema2CN()
{
	name="${1}"

	grep -E '^[1-9][0-9]*$' <<<$name &>/dev/null && index="$((name-1))" || index="x"

	cn=`findEntries -dn 'cn=schema,cn=config' 'objectClass=*' dn -s one | sed "/^dn: cn={$index}.\|}$name,cn=schema,cn=config\$/!d;s/^[^{]\+\({[^,]\+\),cn=schema,cn=config\$/\1/"`

	if [ $? -ne 0 -o -z "`echo "$cn"`" ]; then
		if [ -n "${2}" ]; then
			idx=-1
			for cidx in `findEntries -dn 'cn=schema,cn=config' 'objectClass=*' dn -s one | sed -n 's/^[^{]\+{\([0-9]\)\+}.*$/\1/p'`; do
				[ $cidx -gt $idx ] && idx=$cidx
			done

			echo "{$((idx+1))}$name"
		else
			return 1
		fi
	else
		echo $cn
	fi
}

schema2DN()
{
	cn="`schema2CN "${1}"`" || return 1
	echo "cn=${cn},cn=schema,cn=config"
}

DN2Schema()
{
	dn="${dn#*\}}"
	echo "${dn%%,*}"
}

listSchemata()
{
	findEntries -dn 'cn=schema,cn=config' 'objectClass=*' dn -s one | sed -n '/^ *$/!s/^dn: *cn={-\?[0-9]*}//;s/,.*$//p'
}

testSchema()
{
	schema2CN "${1}" &>/dev/null && return 0 || return 1
}

readSchema()
{
	dn="`schema2DN "${1}"`" || { echo "invalid or missing schema" >&2; exit 1; }

	cat <<EOT
# Copy of schema `readAttribute "$dn" cn`
# DN in LDAP is $dn

`readAttribute "$dn" olcAttributeTypes | sed 's/^/\nattributetype /;s/ \(NAME\|DESC\|EQUALITY\|SUBSTR\|SYNTAX\|SINGLE-VALUE\|SUP\)/\n\t\1/g'`

`readAttribute "$dn" olcObjectClasses | sed 's/^/\nobjectclass /;s/ \(NAME\|DESC\|SUP\|STRUCTURAL\|AUXILIARY\|MAY\|MUST\)/\n\t\1/g'`
EOT
}

schemaFileToLDIF()
{
	aidx=0
	oidx=0

	sed -e '/^#/d;/^ *$/d' | sed -ne '1h;1!H;${;x;s/[ \t]\+/ /g;s/ \?\n / /g;p;}' | sort | while read rule; do
		case `echo ${rule%% *} | tr "A-Z" "a-z"` in
			attributetype)
				[ $aidx -eq 0 ] || echo -n "\n"
				echo -n "olcAttributeTypes: {$aidx}${rule#* }"
				aidx=$((aidx+1))
				;;
			objectclass)
				[ $oidx -eq 0 ] && echo -n "%%toxa%%" || echo -n "\n"
				echo -n "olcObjectClasses: {$oidx}${rule#* }"
				oidx=$((oidx+1))
				;;
			*)
				echo -e "invalid rule in schema file:\n$rule" >&2
				exit 2
		esac
	done
}

writeSchema()
{
	code=`schemaFileToLDIF`

	testSchema "${1}"
	if [ $? -eq 0 ]; then
		dn="`schema2DN "${1}"`"

		ldapmodify -Q -H ldapi:/// -Y EXTERNAL <<-EOT
dn: ${dn}
changetype: modify
replace: olcAttributeTypes
`echo "$code" | sed 's/%%toxa%%/\\n/g' | sed '1!d;s/\\\\n/\\n/g'`
-
replace: olcObjectClasses
`echo "$code" | sed 's/%%toxa%%/\\n/g' | sed '2!d;s/\\\\n/\\n/g'`
-
		EOT
	else
		cn="`schema2CN "${1}" y`"

		ldapadd -Q -H ldapi:/// -Y EXTERNAL <<-EOT
dn: cn=${cn},cn=schema,cn=config
objectClass: olcSchemaConfig
cn: ${cn}
`echo "$code" | sed 's/%%toxa%%/\\n/g' | sed 's/\\\\n/\\n/g'`
		EOT
	fi
}

deleteSchema()
{
	dn="`schema2DN "${1}"`" || { echo "invalid or missing schema" >&2; exit 1; }

	idx="${dn#*{}"
	idx="${idx%%\}*}"

	ldapdelete -Q -H ldapi:/// -Y EXTERNAL "${dn}" || { echo "failed to delete schema ${dn}" >&2; exit 2; }

	while testSchema "$((idx+1))"; do
		olddn="`schema2DN "$((idx+1))"`"
		newcn="`DN2Schema "${olddn}"`"
		newcn="{$idx}$newcn"

		ldapmodify -Q -H ldapi:/// -Y EXTERNAL <<-EOT
dn: ${olddn}
changetype: modrdn
newrdn: cn=${newcn}
deleteoldrdn: 1
newsuperior: cn=schema,cn=config
-
		EOT

		[ $? -ne 0 ] && { echo "failed to move schema $olddn to cn=$newcn,cn=schema,cn=config" >&2; exit 2; }
	done
}

listDatabaseDNs()
{
	findEntries "olcDatabase=*" dn | awk '$1 ~ /dn:/ {print substr($0,5)}'
}

listAllDatabases()
{
	for dn in `listDatabaseDNs`; do
		echo "`DBDN2Name "$dn"`	$dn"
	done
}

listDatabases()
{
	for dn in `listDatabaseDNs`
	do
		if suffix=`findEntries -dn "$dn" "olcSuffix=*" olcSuffix | grep -E '^olcSuffix: '`; then
			echo "`DBDN2Name "$dn"`	${suffix#*: }	$dn"
		fi
	done
}

readAccessRulesOfDatabase()
{
	db="`DBName2DN "${1}"`" || { echo "invalid database: ${1}" >&2; return 1; }
	readAttribute "$db" olcAccess
}

writeAccessRulesOfDatabase()
{
	db="`DBName2DN "${1}"`" || { echo "invalid database: ${1}" >&2; return 1; }
	writeAttribute "$db" olcAccess
	return $?
cat | ldapmodify -Q -H ldapi:/// -Y EXTERNAL <<EOT
dn: $db
changetype: modify
replace: olcAccess
`values2LDIF olcAccess`
-
EOT
}

insertAccessRuleOfDatabase()
{
	db="`DBName2DN "${1}"`" || { echo "invalid database: ${1}" >&2; return 1; }
	insertAttributeLine "${db}" olcAccess "${2}" "${3}"
}

deleteAccessRuleOfDatabase()
{
	db="`DBName2DN "${1}"`" || { echo "invalid database: ${1}" >&2; return 1; }
	deleteAttributeLine "${db}" olcAccess "${2}"
}

showDatabase()
{
	db="`DBName2DN "${ARG}"`" || { echo "invalid database: ${1}" >&2; exit 1; }
	findEntries -dn "$db"
}

usage()
{
	cat >&2 <<EOT
OpenLDAP (slapd) runtime configuration utility
(c) 2012, toxA IT-Dienstleistungen, Berlin (distributed under terms of GPLv3)

common usage: $APPNAME <module> <action> [ <parameters> ]

EOT

	sed 's/\\n/\n/g' >&2

	exit 1
}

badaction()
{
	cat >&2 <<EOT
missing or invalid action: $ACTION

read help available by invoking

$APPNAME $MODULE help

EOT

	exit 1
}



APPNAME="${0}"
MODULE="${1}"
ACTION="${2}"

shift 2

[ -z "$MODULE" ] && { echo "missing module" >&2; MODULE=help; }






case "$MODULE" in

	-h|--help|help)
		usage <<-EOT
available modules are: db raw schema

module-specific help is available with:

  $APPNAME <module> help

		EOT
		;;

	raw)
		case "$ACTION" in
			help)
				usage <<-EOT
module: raw

actions are:

  read      read all value lines from a single DNs attribute
  write     write all value lines of a single DNs attribute read from stdin
  insert    insert value line before selected one in attribute of single DN
  delete    remove selected value line from attribute of single DN
  list      list DNs of subordinated entries using scope one or sub
  show      list all entries and their values of entry selected by DN

				EOT
				;;
			"read")
				[ $# -lt 2 ] && usage <<<"usage: $APPNAME raw read <DN> <attr>\n"
				readAttribute "$@"
				;;
			write)
				[ $# -lt 2 ] && usage <<<"usage: $APPNAME raw write <DN> <attr>\n       (providing value lines on stdin)\n"
				writeAttribute "$@"
				;;
			insert)
				[ $# -lt 4 ] && usage <<<"usage: $APPNAME raw insert <DN> <attr> <linenum> \"<value>\"\n"
				insertAttributeLine "$@"
				;;
			delete)
				[ $# -lt 3 ] && usage <<<"usage: $APPNAME raw delete <DN> <attr> <linenum>\n"
				deleteAttributeLine "$@"
				;;
			list)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME raw list <baseDN> [ one | sub ]\n"
				listEntries "$@"
				;;
			show)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME raw show <DN>\n"
				showEntry "$@"
				;;
			*)
				badaction
				;;
		esac
		;;

	schema)
		case "$ACTION" in
			help)
				usage <<-EOT
module: schema

actions are:

  list    list declared schemata
  exists  test whether schema selected by name or index exists or not
  read    read schema selected by name or index
  write   write schema selected by name or index (file read from stdin)
  delete  delete schema selected by name or index (not supported by OpenLDAP)

				EOT
				;;
			list)
				listSchemata "$@"
				;;
			exists)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME schema exists <schema>\n"
				testSchema "$@"
				;;
			"read")
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME schema read <schema>\n"
				readSchema "$@"
				;;
			write)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME schema write <schema> \"<\" <file>\n"
				writeSchema "$@"
				;;
			delete)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME schema delete <schema>\n"
				deleteSchema "$@"
				;;
			*)
				badaction
				;;
		esac
		;;

	db)
		case "$ACTION" in
			help)
				usage <<-EOT
module: db

actions are:

  list          list name, suffix and DN of every DB containing LDAP thread
  list-all      list name and DN of every DB (incl. config databases etc.)
  show          provide properties of a single DB selected in parameter
  read-access   read access rules from DB selected in parameter
  write-access  write access rules to DB selected in parameter (rules on stdin)
  insert-access insert single access rule in set of rules of selected DB
  delete-access remove single access rule from set of rules of selected DB

				EOT
				;;
			list)
				listDatabases "$@"
				;;
			list-all)
				listAllDatabases "$@"
				;;
			show)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME db show <dbname>\n"
				showDatabase "$@"
				;;
			read-access)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME db read-access <dbname>\n"
				readAccessRulesOfDatabase "$@"
				;;
			write-access)
				[ $# -lt 1 ] && usage <<<"usage: $APPNAME db write-access <dbname>\n"
				writeAccessRulesOfDatabase "$@"
				;;
			insert-access)
				[ $# -lt 3 ] && usage <<<"usage: $APPNAME db insert-access <dbname> <ruleindex> \"<rule>\"\n"
				insertAccessRuleOfDatabase "$@"
				;;
			delete-access)
				[ $# -lt 2 ] && usage <<<"usage: $APPNAME db delete-access <dbname> <ruleindex>\n"
				deleteAccessRuleOfDatabase "$@"
				;;
			*)
				badaction
				;;
		esac
		;;

	*)
		cat >&2 <<-EOT
unknown module: $MODULE

use "$APPNAME help" for list of available modules

EOT
		;;
esac
